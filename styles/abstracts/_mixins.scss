@import "vars";

$headerHeight: 172px;

/* breakpoints */
$desktop-large: 1340px;
$desktop: 960px;
$tablet: 640px;

$font-base: "castledown-regular", "Segoe UI", Candara, "Bitstream Vera Sans", "DejaVu Sans", "Bitstream Vera Sans", "Trebuchet MS", Verdana, "Verdana Ref", sans-serif;

$font-bold: "castledown-bold", "Segoe UI", Candara, "Bitstream Vera Sans", "DejaVu Sans", "Bitstream Vera Sans", "Trebuchet MS", Verdana, "Verdana Ref", sans-serif;

$font-heavy: "castledown-heavy", "Segoe UI", Candara, "Bitstream Vera Sans", "DejaVu Sans", "Bitstream Vera Sans", "Trebuchet MS", Verdana, "Verdana Ref", sans-serif;

@mixin box-shadow() {
    box-shadow: 0 0.2rem 0.5rem 0 rgba(19, 30, 41, 0.16), 0 0.6rem 0.8rem 0 rgba(0, 0, 0, 0.08);
}

@mixin section-border-left() {
    border-left: 8px solid $primary;
}

@mixin wrapper() {
    max-width: 960px;
    margin: 0 auto !important;
}
@mixin clearfix {
    &:after {
        content: "";
        display: table;

        clear: both;
    }
}
@mixin headings($from: 1, $to: 6) {
    @for $i from $from through $to {
        h#{$i} {
            @content
        }
    }
}

@mixin font-size($sizeValue: 1.6) {
    font-size: ($sizeValue * 10) + px;
    font-size: $sizeValue + rem;
}

@mixin loading-gif() {
    background-image: url(data:image/svg+xml;charset=utf-8;base64,PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAzMiAzMiIgd2lkdGg9IjMyIiBoZWlnaHQ9IjMyIiBmaWxsPSJibGFjayI+DQogIDxwYXRoICBvcGFjaXR5PSIuMjUiIGQ9Ik0xNiAwIEExNiAxNiAwIDAgMCAxNiAzMiBBMTYgMTYgMCAwIDAgMTYgMCBNMTYgNCBBMTIgMTIgMCAwIDEgMTYgMjggQTEyIDEyIDAgMCAxIDE2IDQiLz4NCiAgPHBhdGggZmlsbD0nIzFhODBiNicgZD0iTTE2IDAgQTE2IDE2IDAgMCAxIDMyIDE2IEwyOCAxNiBBMTIgMTIgMCAwIDAgMTYgNHoiPg0KICAgIDxhbmltYXRlVHJhbnNmb3JtIGF0dHJpYnV0ZU5hbWU9InRyYW5zZm9ybSIgdHlwZT0icm90YXRlIiBmcm9tPSIwIDE2IDE2IiB0bz0iMzYwIDE2IDE2IiBkdXI9IjAuOHMiIHJlcGVhdENvdW50PSJpbmRlZmluaXRlIiAvPg0KICA8L3BhdGg+DQo8L3N2Zz4NCg==);
    background-position: center center;
    background-repeat: no-repeat;
}

@mixin bp_max($pxValue) {
    $unitLessValue: strip-unit($pxValue);
    $value: pxToEM($unitLessValue);
    @media all and (max-width: $value) {
         @content;
    }
}

@mixin bp_between($lowPxValue, $highPxVlue) {
    $unitLessLowValue: strip-unit($lowPxValue);
    $unitLessHightValue: strip-unit($highPxVlue);
    $valueLow: pxToEM($unitLessLowValue);
    $valueHigh: pxToEM($unitLessHightValue);
    @media all and (min-width: $valueLow) and (max-width: $valueHigh) {
         @content;
    }
}

@mixin bp_min($pxValue) {
    $unitLessValue: strip-unit($pxValue);
    $value: pxToEM($unitLessValue);
    @media all and (min-width: $value) {
         @content;
    }
}


@mixin border-basic($position:all, $border-color:$border-gray, $border-width:1px) {
    @if($position!=all) {
        border-#{$position}-width: $border-width;
        border-#{$position}-style: solid;
        border-#{$position}-color: $border-color;
    }
    @else {
        border-width: $border-width;
            border-style: solid;
            border-color: $border-color;
    }
}
@mixin fixed-bg($pos, $min-height:240px) {
    background-position: $pos;
    background-attachment: fixed;
    min-height: $min-height;
}
@mixin linear-gradient($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction)==false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
    }
    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
}

@mixin component-margins {
    width: 100%;
    margin: rem-calc(24) auto;
    @include bp_min($desktop) {
        margin: rem-calc(40) auto;
    }
}

@mixin cta-button {
    padding: rem-calc(16 24);
    margin: 0;
    font-size: rem-calc(18);
    display: inline-block;
    line-height: rem-calc(24);
    text-align: left;
    white-space: normal;
    vertical-align: middle;
    touch-action: manipulation;
    cursor: pointer;
    user-select: none;
    border: none;
    border-radius: rem-calc(32);
    color: $primary;
    background-color: $highlightBlue;
    text-transform: none;
    transition: background-color .25s ease-in-out;
    //box-shadow: 0 0.2rem 0.5rem 0 rgba(19, 30, 41, 0.16), 0 0.6rem 0.8rem 0 rgba(0, 0, 0, 0.08);
    position: relative;
    font-family: $font-bold;
    font-weight: normal;
    text-decoration: none;

    background-size: 16px 16px;
    padding-right: rem-calc(56);
    background-repeat: no-repeat;
    background-position: center right 24px;
    background-image: url(/images/icon-arrow-blue.svg);

    &:active,
    &.active,
    &.open,
    &:hover,
    &:focus {
        border: none;
        background-color: #51b2e5;
        color: $primary;
    }

    &.disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
}

@function pxToEM($target) {
    @if $target == 0{
       @return 0
   }
    @return $target / 16 + 0em;
}
@function rem($value) {
    @return $value / 2 + 0rem;
}
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

$global-font-size: 16px !default;
@function rem-calc($values, $base: null) {
  $rem-values: ();
  $count: length($values);

  // If no base is defined, defer to the global font size
  @if $base == null {
    $base: $global-font-size;
  }

  // If the base font size is a %, then multiply it by 16px
  // This is because 100% font size = 16px in most all browsers
  @if unit($base) == '%' {
    $base: ($base / 100%) * 16px;
  }

  @if $count == 1 {
    @return -zf-to-rem($values, $base);
  }

  @for $i from 1 through $count {
    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));
  }

  @return $rem-values;
}

/// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.
/// @access private
///
/// @param {Number} $value - Pixel value to convert.
/// @param {Number} $base [null] - Base for pixel conversion.
///
/// @returns {Number} A number in rems, calculated based on the given value and the base pixel value. rem values are passed through as is.
@function -zf-to-rem($value, $base: null) {
    // Check if the value is a number
    @if type-of($value) != 'number' {
      @warn inspect($value) + ' was passed to rem-calc(), which is not a number.';
      @return $value;
    }

    // Calculate rem if units for $value is not rem
    @if unit($value) != 'rem' {
      $value: strip-unit($value) / strip-unit($base) * 1rem;
    }

    // Turn 0rem into 0
    @if $value == 0rem {
      $value: 0;
    }

    @return $value;
  }


  @mixin respond-to($media) {
    @if $media==mobile {
        @media only screen and (max-width: $break-mobile) {
            @content;
        }
    }

    @else if $media==mobile-horizontal {
        @media only screen and (max-width: $tablet - 1) {
            @content;
        }
    }

    @else if $media==mobile-large {
        @media only screen and (max-width: $break-mobile-large) {
            @content;
        }
    }

    @else if $media==tablet {
        @media only screen and (min-width: $break-mobile + 1) and (max-width: $break-desktop - 1) {
            @content;
        }
    }

    @else if $media==all-mobile {
        @media only screen and (max-width: $break-desktop - 1) {
            @content;
        }
    }

    @else if $media==desktop {
        @media only screen and (min-width: $break-desktop) {
            @content;
        }
    }
}

.visuallyhidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}
